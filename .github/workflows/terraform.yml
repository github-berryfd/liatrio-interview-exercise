# This reusable workflow is designed to use Terraform to provision the infrastructure and initialize the Google Kubernetes Engine
# On first run, the workflow will most likely fail. (race condition)
name: 'Setting Up Infrastructure'

on:
  # This workflow can only be called within Github, Defaults are provided
  workflow_call:
    inputs:
      region:
        required: true
        type: string
        default: 'us-central1'
      network:
        required: false
        default: 'terraformed-vpc-01'
        type: string
      subnetwork:
        required: false
        default: 'terraformed-subnet-01'
        type: string
      ip_range_pods:
        default: 'terraformed-subnet-01-gke-01-pods'
        required: false
        type: string
      ip_range_services:
        default: 'terraformed-subnet-01-gke-01-services'
        required: false
        type: string
      cluster_name:
        default: 'terraformed-gke-cluster'
        required: false
        type: string
      node_pool:
        default: 'terraformed-gke-node-pool'
        required: false
        type: string
    secrets: 
      GCP_SC_KEY: 
        required: false
      SERVICE_ACCOUNT:
        required: false
      GKE_PROJECT_ID:
        required: false

  workflow_dispatch:
    

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform Infrastructure'
    runs-on: ubuntu-latest
    environment: production
    env:
      TF_VAR_region: ${{ inputs.region }}
      TF_VAR_network: ${{ inputs.network }}
      TF_VAR_subnetwork: ${{ inputs.subnetwork }}
      TF_VAR_ip_range_pods: ${{ inputs.ip_range_pods }}
      TF_VAR_ip_range_services: ${{ inputs.IP_RANGE_SERVICES }}
      TF_VAR_compute_engine_service_account: ${{ secrets.SERVICE_ACCOUNT}}
      TF_VAR_project_id: ${{ secrets.GKE_PROJECT_ID }}
      TF_VAR_cluster_name: ${{ inputs.cluster_name }}
      TF_VAR_node_pool_name: ${{ inputs.node_pool }}

      # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./infra

    steps:

    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ github.ref }}

    # Configure GCP Authentication with Service Account Credentials. This should be using Workload Identity Federation and generate an access token instead. (MVP)
    - name: Authenticate With GCP
      uses: google-github-actions/auth@v1.2.0
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
        create_credentials_file: true
        export_environment_variables: true

    # Configure the SDK so that we can use terraform natively
    - name: Setup Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      
    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.6.4"

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init 

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -input=false # The plan should probably be saved to be used in the next step.
      continue-on-error: true # It looks like git is getting the wrong status code back after planning, it is successful but the status code says that it failed.
    
    # Destroy the infrastructure to its default state (Nothing)
    - name: Terraform Apply
      run: terraform apply -auto-approve -input=false
