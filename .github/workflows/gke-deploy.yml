# This reusable workflow is designed to deploy the kubernetes manififest files (deployment and service files) to Google Kubernetes Engine (GKE)
name: Deploy to GKE
# Specified Required Inputs
on:
  # This workflow can only be called by another workflow 
  workflow_call:
    inputs:
      kube_context:
        required: true
        type: string
      gke_cluster:
        required: true
        type: string
      gke_region:
        required: true
        type: string
      deployment_name:
        required: true
        type: string
    secrets:
      PROJECT_ID: 
        required: false # Even though they actually are required, inheriting the secret doesn't satisfy the 'required: true' and will fail.
      GCP_SA_KEY:
        required: false
# Passing inputs as ENV's for actions.
env:
  GKE_CLUSTER: ${{ inputs.gke_cluster }}   
  GKE_REGION: ${{ inputs.gke_region }}   
  KUBE_CONTEXT: ${{ inputs.kube_context }}
  DEPLOYMENT_NAME: ${{ inputs.deployment_name }}

jobs:
  deploy:
    name: Deploy to GKE
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      # Configure GCP Authentication with Service Account Credentials. This should be using Workload Identity Federation and generate an access token instead. (MVP)
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1.2.0'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          create_credentials_file: true
          export_environment_variables: true
      
      # Now that GCP Authentication was successful, we need to authenticate to GKE with GCP credentials so that kubectl will work natively within the container.
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_REGION }}

      # Update Manifest Files
      - name: "Apply Manifest Files"
        run: kubectl apply -f ./deployment/kube/

      # Update meta data so rolling deploy will work
      - name: "Triggering Deployment Update"
        run: kubectl patch deployment $DEPLOYMENT_NAME -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}"
      
      - name: "Rolling Deploy"
        run: kubectl rollout restart deployment 
