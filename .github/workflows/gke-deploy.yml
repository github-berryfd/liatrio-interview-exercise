# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  workflow_call:
    inputs:
      gke_cluster:
        required: true
        type: string
      gke_region:
        required: true
        type: string
      deployment_name:
        required: true
        type: string
      dockerfile_path:
        required: true
        type: string
      image_tag:
        required: true
        type: string
    secrets:
      PROJECT_ID: 
        required: false
      GCP_SA_KEY:
        required: false
      DOCKER_USERNAME:
        required: false
      DOCKER_AUTH_TOKEN:
        required: false

env:
  GKE_CLUSTER: ${{ inputs.gke_cluster }}   
  GKE_REGION: ${{ inputs.gke_region }}   
  DEPLOYMENT_NAME: ${{ inputs.deployment_name }} 
  DOCKERFILE_PATH: ${{ inputs.dockerfile_path }}
  IMAGE_TAG: ${{ inputs.image_tag }}
jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'

    steps:
      # Checkout the repository to the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      # Configure Workload Identity Federation and generate an access token.
      - name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1.2.0'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v1
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_REGION }}
      
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Login to Docker
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_AUTH_TOKEN }}

      # Build the Docker image
      - name: Build and Publish
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ env.DOCKERFILE_PATH }}
          tags: ${{ env.IMAGE_TAG }}


      # # Push the Docker image to Google Artifact Registry
      # - name: Publish
      #   run: |-
      #     docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
      # # Set up kustomize
      # # - name: Set up Kustomize
      # #   run: |-
      # #     curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
      # #     chmod u+x ./kustomize
      # # Deploy the Docker image to the GKE cluster
      # - name: Deploy
      #   run: |-
      #     # replacing the image name in the k8s template
      #     # ./kustomize edit set image LOkON-docker.pkg.dev/PROJECT_ID/REPOSITORY/IMAGE:TAG=$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA
      #     # ./kustomize build . | kubectl apply -f -
      #     kubectl rollout status deployment/$DEPLOYMENT_NAME
      #     kubectl get services -o wide
